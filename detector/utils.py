from django.core.files.storage import FileSystemStorage
from uuid import uuid4
from pandas.io import json
from pdfid.pdfid import PDFiDMain, get_fake_options
import pandas as pd
import os
import pickle


def handle_file_upload(file):
    fs = FileSystemStorage()
    uuid_name = uuid4()
    filename = fs.save(file.name+f'-{uuid_name}', file)
    uploaded_file_path = fs.path(filename)

    return uploaded_file_path


def scan_pdf_file(path):
    options = get_fake_options()
    options.json = True

    return PDFiDMain([path], options)['reports']


def clean_scanned_data(data):
    cleaned_data = pd.read_json(json.dumps(data))
    cleaned_data["header"] = pd.to_numeric(
        cleaned_data["header"].str.replace('[^\d.]', ''), errors='coerce')

    # Drop fieds not needed for prediction

    cleaned_data.drop(['filename', 'version', '/Colors > 2^24'],
                      axis=1, inplace=True)
    cleaned_data.dropna(inplace=True)

    if cleaned_data.empty:
        raise Exception('Error occured processing file data')
    return cleaned_data


def predict(data):
    current_dir = os.path.dirname(__file__)

    svm_model_path = os.path.join(current_dir, '..', 'ml', 'svm_model.sav')
    scaler_path = os.path.join(current_dir, '..', 'ml', 'standard_scaler.sav')

    svm_model = pickle.load(open(svm_model_path, "rb"))
    scaler = pickle.load(open(scaler_path, "rb"))

    prediction = svm_model.predict(scaler.transform(data))
    return prediction[0]
