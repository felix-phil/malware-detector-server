from rest_framework.views import APIView
from rest_framework.parsers import FormParser, MultiPartParser
from rest_framework.status import HTTP_200_OK, HTTP_400_BAD_REQUEST, HTTP_500_INTERNAL_SERVER_ERROR
from .utils import handle_file_upload, scan_pdf_file, clean_scanned_data, predict
from rest_framework.response import Response
import os
import time

error_message_500 = {"error": "Something went wrong"}


class UploadFile(APIView):
    parser_classes = (FormParser, MultiPartParser)

    def post(self, request, *args, **kwargs):
        try:
            data = request.data
            pdf = data['pdf']

            uploaded_file_path = handle_file_upload(data['pdf'])
            return Response({"path": uploaded_file_path}, HTTP_200_OK)

        except KeyError:
            return Response({"error": "PDF file is required"}, HTTP_400_BAD_REQUEST)
        except Exception as e:
            print(e)
            return Response(error_message_500, HTTP_500_INTERNAL_SERVER_ERROR)


class Predict(APIView):
    def post(self, request, *args, **kwargs):
        try:
            start_time = time.time()
            # Get file_path
            file_path = request.data['path']

            # test if path is valid
            if not file_path or not os.path.exists(file_path):
                return Response({"error": "Valid file path is required"}, HTTP_400_BAD_REQUEST)

            # scan with pdfid to produce data
            scanned_data = scan_pdf_file(file_path)

            if not scanned_data:
                return Response({
                    "error":
                    "Error scanning PDF file, this may occur if file is damaged or harmful"
                }, HTTP_400_BAD_REQUEST)

            # clean the data
            cleaned_data = clean_scanned_data(scanned_data)

            # get prediction
            prediction = predict(cleaned_data)

            # remove file from storage
            os.unlink(file_path)

            return Response({"prediction": prediction,
                             "duration": time.time()-start_time},
                            HTTP_200_OK)
        except KeyError:
            return Response({"error": "Path to uploaded file is required"},
                            HTTP_400_BAD_REQUEST)
        except:
            return Response(error_message_500, HTTP_500_INTERNAL_SERVER_ERROR)
